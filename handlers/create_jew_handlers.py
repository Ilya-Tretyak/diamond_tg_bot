"""Create jew handlers, —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –±–æ—Ç–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ —É–∫—Ä–∞—à–µ–Ω–∏—è.
 –ë—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ñ–∏–ª—å—Ç—Ä–∞–º–∏)"""

from aiogram import Router, types, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

import kb
import text
from states import CreateJew

"""–°–û–ó–î–ê–ù–ò–ï –Æ–í–ï–õ–ò–†–ù–û–ì–û –£–†–ö–ê–®–ï–ù–ò–ï –ù–ê –ó–ê–ö–ê–ó"""

create_jew_router = Router()


@create_jew_router.message(F.text == "–°–æ–∑–¥–∞–Ω–∏–µ —é–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è –Ω–∞ –∑–∞–∫–∞–∑ üíç")
@create_jew_router.message(CreateJew.jew_category)
async def create_jew_handler(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–¥–µ–ª–∏—è"""
    await state.set_state(CreateJew.create_jew)
    await msg.answer(text.menu_jew_create, reply_markup=kb.menu_jew_create)


@create_jew_router.message(CreateJew.create_jew)
async def create_jew(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —É–∫—Ä–∞—à–µ–Ω–∏—è."""
    await state.clear()
    await state.update_data(category=msg.text)
    if msg.text == "–ö–æ–ª—å—Ü–æ":
        await state.set_state(CreateJew.jew_size)
        markup = kb.create_size_ring
    elif msg.text == "–¶–µ–ø—å" or msg.text == "–ë—Ä–∞—Å–ª–µ—Ç":
        await state.set_state(CreateJew.jew_size_chain)
        if msg.text == "–ë—Ä–∞—Å–ª–µ—Ç":
            markup = kb.create_size_bracelet
        else:
            markup = kb.create_size_chain
    elif msg.text in ["–°–µ—Ä—å–≥–∏", "–ü–æ–¥–≤–µ—Å–∫–∞", "–ü—É—Å–µ—Ç—ã", "–ö–æ–ª—å–µ"]:
        await state.set_state(CreateJew.jew_size)
        await material_selection(msg, state)

    else:
        await state.set_state(CreateJew.about_jew)
        await about_jew(msg, state)
    await msg.answer(text.create_jew, reply_markup=markup)


@create_jew_router.message(F.text == "–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä")
async def different_gem(msg: Message, state: FSMContext):
    await msg.answer(text.different_size)


@create_jew_router.message(CreateJew.jew_size_chain)
async def weaving_selection(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–ª–µ—Ç–µ–Ω–∏—è –∏–∑–¥–µ–ª–∏—è"""
    if msg.text == "<–ù–∞–∑–∞–¥":
        await state.set_state(CreateJew.jew_category)
        await create_jew_handler(msg, state)
    else:
        await state.update_data(size=msg.text)
        await state.update_data(material="None")
        await state.set_state(CreateJew.jew_size)
        await msg.answer(text.weaving_chain, reply_markup=kb.weaving_chain)


@create_jew_router.message(CreateJew.jew_size)
async def material_selection(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è."""
    data = await state.get_data()
    if msg.text == "<–ù–∞–∑–∞–¥":
        await state.set_state(CreateJew.jew_category)
        await create_jew_handler(msg, state)
    else:
        if "size" in data and data['material'] != "":
            await state.update_data(weaving=msg.text)
        elif msg.text in ["–°–µ—Ä—å–≥–∏", "–ü–æ–¥–≤–µ—Å–∫–∞", "–ü—É—Å–µ—Ç—ã", "–ö–æ–ª—å–µ"]:
            await state.update_data(size="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await state.update_data(weaving="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            await state.update_data(size=msg.text)
            await state.update_data(weaving="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await state.set_state(CreateJew.jew_gem)
        await msg.answer(text.material_selection, reply_markup=kb.material_selection)


@create_jew_router.message(CreateJew.jew_gem)
async def gem(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∞–ª–∏—á–∏—è –∫–∞–º–Ω–µ–π."""
    if msg.text == "<-–ù–∞–∑–∞–¥":
        await state.set_state(CreateJew.jew_category)
        await create_jew_handler(msg, state)
    else:
        await state.update_data(material=msg.text)
        await state.set_state(CreateJew.jew_gem_selection)
        await msg.answer(text.answer_have_gem, reply_markup=kb.have_gem)


@create_jew_router.message(CreateJew.jew_gem_selection)
async def gem_selection(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞–º–Ω—è(–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π/–ü–æ–ª—É–¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π)"""
    if msg.text == "<--–ù–∞–∑–∞–¥":
        await state.set_state(CreateJew.jew_size)
        await state.update_data(material="")
        await material_selection(msg, state)
    elif msg.text == "–î–∞ ‚úÖ":
        await state.update_data(category_gem=msg.text)
        await state.set_state(CreateJew.about_jew)
        await msg.answer_photo(
            photo=types.FSInputFile(path="picturies/precious.jpeg"),
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–π'",
            reply_markup=kb.gem_precious
        )
    else:
        await state.set_state(CreateJew.about_jew)
        await about_jew(msg, state)


@create_jew_router.message(CreateJew.about_jew and F.text == "–î—Ä—É–≥–æ–π")
async def different_gem(msg: Message, state: FSMContext):
    await msg.answer(text.different_gem)


@create_jew_router.message(CreateJew.about_jew)
async def about_jew(msg: Message, state: FSMContext):
    """–û–± —É–∫—Ä–∞—à–µ–Ω–∏–∏(—Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å–∞–π—Ç–µ, –¥—Ä—É–≥–æ–µ)"""
    if msg.text == "<- –ù–∞–∑–∞–¥":
        await state.set_state(CreateJew.jew_gem)
        await gem(msg, state)
    else:
        if msg.text != "–ë—Ä–æ—à—å":
            await state.update_data(gem=msg.text)
        else:
            await state.update_data(size="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await state.update_data(weaving="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await state.update_data(material="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await state.update_data(gem="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await state.set_state(CreateJew.jew_view)
        await msg.answer(text.answer_about_jew, reply_markup=kb.about_jew)


@create_jew_router.message(F.text == "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (–ø–æ—Ö–æ–∂–µ–≥–æ) —É–∫—Ä–∞—à–µ–Ω–∏—è üñº")
@create_jew_router.message(F.text == "–£–∫—Ä–∞—à–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ üìî")
@create_jew_router.message(F.text == "–Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ö–æ—á—É...")
@create_jew_router.message(CreateJew.jew_view)
async def picture(msg: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∫—Ä–∞—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if msg.text == "<-- –ù–∞–∑–∞–¥":
        await state.set_state(CreateJew.jew_gem)
        await gem(msg, state)
    elif msg.text == "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (–ø–æ—Ö–æ–∂–µ–≥–æ) —É–∫—Ä–∞—à–µ–Ω–∏—è üñº":
        await state.set_state(CreateJew.send_picture)
        await msg.answer(text.picture)
    elif msg.text == "–£–∫—Ä–∞—à–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ üìî":
        await state.set_state(CreateJew.send_article)
        await msg.answer(text.article)
    elif msg.text == "–Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ö–æ—á—É...":
        await state.update_data(dont_know=msg.text)
        await state.set_state(CreateJew.send_dont_know)
        await msg.answer(text.send_dont_know, reply_markup=kb.send_dont_know)


@create_jew_router.message(CreateJew.send_picture)
async def send_picture(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    await state.update_data(picture=msg.photo[-1].file_id)
    await state.set_state(CreateJew.view_order)
    await view_order(msg, state)


@create_jew_router.message(CreateJew.send_article)
async def send_article(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å —Å–∞–π—Ç–∞"""
    await state.update_data(article=msg.text)
    await state.set_state(CreateJew.view_order)
    await view_order(msg, state)


@create_jew_router.message(CreateJew.view_order)
@create_jew_router.message(CreateJew.send_dont_know)
async def view_order(msg: Message, state: FSMContext):
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await msg.delete()
    await state.set_state(CreateJew.user_contact_share)
    data = await state.get_data()
    await msg.answer(
        f"<b>–£—Ç–æ—á–Ω–∏–º –≤–∞—à –∑–∞–∫–∞–∑:</b>"
        f"\n\t‚Ä¢<i>–í–∏–¥ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i> \n    <b><i>{data['category']}</i></b>"
        f"\n\t‚Ä¢<i>–†–∞–∑–º–µ—Ä:</i> \n\t    <b><i>{data['size']}</i></b>"
        f"\n\t‚Ä¢<i>–ü–ª–µ—Ç–µ–Ω–∏–µ:</i> \n\t    <b><i>{data['weaving']}</i></b>"
        f"\n\t‚Ä¢<i>–ú–∞—Ç–µ—Ä–∏–∞–ª:</i> \n\t    <b><i>{data['material']}</i></b>"
        f"\n\t‚Ä¢<i>–ö–∞–º–µ–Ω—å:</i> \n\t    <b><i>{data['gem']}</i></b>"
        f"\n\t<i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Ö–æ–∂–µ–≥–æ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i>"
    )
    if 'picture' in data:
        await msg.answer_photo(data['picture'])
    elif 'article' in data:
        await msg.answer(f"<code>{data['article']}</code>")
    else:
        await msg.answer(data['dont_know'])
    await msg.answer(text.yes_or_no, reply_markup=kb.yes_or_no)


@create_jew_router.message(F.text == "–ù–µ—Ç‚ùå, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.")
async def unsuccessful_order(msg: Message, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã"""
    await state.set_state(CreateJew.create_jew)
    await msg.answer("–£–ø—Å!ü´£ –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑", reply_markup=kb.menu_jew_create)


@create_jew_router.message(CreateJew.user_contact_share)
async def get_contact_user(msg: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(CreateJew.user_contact)
    await msg.answer(text.contact_user_share, reply_markup=kb.contact_keyboard)


@create_jew_router.message(CreateJew.user_contact)
async def successful_order(msg: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    await state.update_data(user_contact=msg.contact.phone_number)
    data = await state.get_data()
    await state.bot.send_message(
        chat_id=314716345,
        text=\
        f"–ó–∞–∫–∞–∑ –æ—Ç {msg.from_user.full_name} \n username: {msg.from_user.username}"
        f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {data['user_contact']}"
        f"\n\t‚Ä¢<i>–í–∏–¥ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i> \n    <b><i>{data['category']}</i></b>"
        f"\n\t‚Ä¢<i>–†–∞–∑–º–µ—Ä:</i> \n\t    <b><i>{data['size']}</i></b>"
        f"\n\t‚Ä¢<i>–ü–ª–µ—Ç–µ–Ω–∏–µ:</i> \n\t    <b><i>{data['weaving']}</i></b>"
        f"\n\t‚Ä¢<i>–ú–∞—Ç–µ—Ä–∏–∞–ª:</i> \n\t    <b><i>{data['material']}</i></b>"
        f"\n\t‚Ä¢<i>–ö–∞–º–µ–Ω—å:</i> \n\t    <b><i>{data['gem']}</i></b>"
        f"\n\t<i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Ö–æ–∂–µ–≥–æ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i>"

    )
    if 'picture' in data:
        await state.bot.send_photo(chat_id=314716345, photo=data['picture'])
    elif 'article' in data:
        await state.bot.send_message(chat_id=314716345, text=f"<code>{data['article']}</code>")
    else:
        await state.bot.send_message(chat_id=314716345, text=data['dont_know'])
    await state.clear()
    await msg.answer(
        "\t–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–∞–º."
        "\n\t–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
        f"\n\t {msg.from_user.first_name}, –º—ã —Ä–∞–¥—ã —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏‚ô•"
        "\n–° –ª—é–±–æ–≤—å—é, \n<i>'–Æ–≤–µ–ª–∏—Ä–Ω—ã–π –î–æ–º –î–∞–π–º–æ–Ω–¥'</i>",
        reply_markup=kb.write_order_back
    )
