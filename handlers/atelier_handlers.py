"""Atelier_handlers, —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –±–æ—Ç–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ —Ä–µ–º–æ–Ω—Ç–∞ —É–∫—Ä–∞—à–µ–Ω–∏—è.
 –ë—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ñ–∏–ª—å—Ç—Ä–∞–º–∏)"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import kb
import text
from states import RepairJew

"""–£–°–õ–£–ì–ò –ú–ê–°–¢–ï–†–°–ö–û–ô"""

atelier_router = Router()


@atelier_router.message(F.text == "–£—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π üíé")
async def atelier_choice_job(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π"""
    await state.set_state(RepairJew.atelier_jew_category)
    await msg.answer(text.atelier_jew, reply_markup=kb.atelier_choice_job)


@atelier_router.message(RepairJew.atelier_jew_category)
@atelier_router.message(F.text == "<-–ù–∞–∑–∞–¥")
async def repair_choice_jew(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∏–∑–¥–µ–ª–∏—è –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞"""
    if msg.text != "<-–ù–∞–∑–∞–¥":
        await state.update_data(atelier_choice_job=msg.text)
    data = await state.get_data()
    if data["atelier_choice_job"] == "–†–µ–º–æ–Ω—Ç –∏–∑–¥–µ–ª–∏—è":
        await state.set_state(RepairJew.atelier_choice_repair)
    elif data["atelier_choice_job"] == "–ß–∏—Å—Ç–∫–∞ –∏–∑–¥–µ–ª–∏—è":
        await state.set_state(RepairJew.atelier_choice_clean)
    elif data["atelier_choice_job"] == "–ó–∞–∫—Ä–µ–ø–∫–∞ –∫–∞–º–Ω–µ–π":
        await state.set_state(RepairJew.atelier_choice_fix_stone)
    elif data["atelier_choice_job"] == "–ü–µ—Ä–µ–ø–ª–∞–≤ –∏–∑–¥–µ–ª–∏—è":
        await state.set_state(RepairJew.atelier_choice_remelting)
    await msg.answer(text.atelier_choice_jew, reply_markup=kb.menu_jew_create)


@atelier_router.message(RepairJew.atelier_choice_repair)
async def repair_choice_ring(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è –∏–∑–¥–µ–ª–∏–π"""
    data = await state.get_data()
    await state.update_data(jew_selection=msg.text)
    await state.set_state(RepairJew.atelier_materials)
    if msg.text == "–ö–æ–ª—å—Ü–æ":
        await msg.answer(text.repair_choice_jews, reply_markup=kb.repair_choice_ring)
    elif msg.text == "–°–µ—Ä—å–≥–∏":
        await msg.answer(text.repair_choice_jews, reply_markup=kb.repair_choice_earrings)
    elif msg.text == "–ü—É—Å–µ—Ç—ã":
        await msg.answer(text.repair_choice_jews, reply_markup=kb.repair_choice_poussettes)
    elif msg.text == "–¶–µ–ø—å":
        await msg.answer(text.repair_choice_jews, reply_markup=kb.repair_choice_chain)
    elif msg.text == "–ë—Ä–∞—Å–ª–µ—Ç":
        await msg.answer(text.repair_choice_jews, reply_markup=kb.repair_choice_bracelet)


@atelier_router.message(F.text == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª—å—Ü–∞")
async def repair_ring_size(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª—å—Ü–∞"""
    await state.update_data(repair_choice_job=msg.text)
    await msg.answer(text.ring_size, reply_markup=kb.repair_ring_size)


@atelier_router.message(F.text == "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞")
@atelier_router.message(F.text == "–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞")
async def repair_ring_size_count(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª—å—Ü–∞"""
    await state.update_data(ring_size_more_less=msg.text)
    await state.set_state(RepairJew.atelier_materials)
    await msg.answer(text.ring_size_count, reply_markup=kb.ring_size_count)


@atelier_router.message(RepairJew.atelier_choice_clean)
async def atelier_choice_clear(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —á–∏—Å—Ç–∫–∏"""
    await state.update_data(jew_selection=msg.text)
    await state.set_state(RepairJew.atelier_materials)
    await msg.answer(text.clear, reply_markup=kb.atelier_choice_clear)


@atelier_router.message(RepairJew.atelier_choice_fix_stone)
async def atelier_choice_fix_stone(msg: Message, state: FSMContext):
    """–ó–∞–∫—Ä–µ–ø–∏—Ç—å/–û—Ç–∫—Ä–µ–ø–∏—Ç—å –∫–∞–º–µ–Ω—å"""
    await state.update_data(jew_selection=msg.text)
    await state.set_state(RepairJew.atelier_materials)
    await msg.answer(text.fix_stone, reply_markup=kb.atelier_choice_fix_stone)


@atelier_router.message(RepairJew.atelier_choice_remelting)
async def atelier_choice_remelting(msg: Message, state: FSMContext):
    """–ü–µ—Ä–µ–ø–ª–∞–≤ –∏–∑–¥–µ–ª–∏—è"""
    await state.update_data(jew_selection=msg.text)
    await state.set_state(RepairJew.atelier_materials)
    await msg.answer(text.fix_stone, reply_markup=kb.atelier_choice_remelting)


@atelier_router.message(RepairJew.atelier_materials)
async def repair_materials(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑–¥–µ–ª–∏—è"""
    data = await state.get_data()
    await state.set_state(RepairJew.atelier_send_picture)
    if msg.text in ["1", "2"]:
        await state.update_data(ring_size_count=msg.text)
    else:
        await state.update_data(repair_choice_job=msg.text)
    await msg.answer(text.materials, reply_markup=kb.material_selection)


@atelier_router.message(RepairJew.atelier_send_picture)
async def send_picture(msg: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑–¥–µ–ª–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.update_data(material=msg.text)
    await state.set_state(RepairJew.atelier_view_order)
    await msg.answer(text.atelier_picture, reply_markup=kb.atelier_picture)


@atelier_router.message(RepairJew.atelier_view_order)
async def atelier_view_order(msg: Message, state: FSMContext):
    """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"""
    if msg.text != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        await state.update_data(repair_picture=msg.photo[-1].file_id)
    await state.set_state(RepairJew.atelier_user_contact_share)
    data = await state.get_data()
    await msg.answer("<b>–£—Ç–æ—á–Ω–∏–º –≤–∞—à –∑–∞–∫–∞–∑:</b>")
    await msg.answer(
        f"\n\t<b><i>{data['atelier_choice_job']}</i></b>"
        f"\n\t‚Ä¢<i>–í–∏–¥ –∏–∑–¥–µ–ª–∏—è:</i> \n\t    <b><i>{data['jew_selection']}</i></b>"
        f"\n\t‚Ä¢<i>–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–¥–µ–ª–∏—è:</i> \n\t    <b><i>{data['material']}</i></b>"
        f"\n\t<i>–í–∏–¥ —Ä–µ–º–æ–Ω—Ç–∞:</i> "
        f"\n\t    <b><i>{data['repair_choice_job']}</i></b> "
    )
    if 'ring_size_more_less' in data:
        await msg.answer(
            f"\n\t    ‚Ä¢<b><i>{data['ring_size_more_less']} –Ω–∞ {data['ring_size_count']}</i></b>"
        )
    if 'repair_picture' in data and data['repair_picture'] != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        await msg.answer("\n\t<i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i>")
        await msg.answer_photo(data['repair_picture'])
    else:
        await msg.answer("\n\t<i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i>")
        await msg.answer("\n\t<i> -–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>")
    await msg.answer(text.yes_or_no, reply_markup=kb.atelier_yes_or_no)


@atelier_router.message(F.text == "–ù–µ—Ç‚ùå, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
async def unsuccessful_order(msg: Message, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã"""
    await state.set_state(RepairJew.atelier_jew_category)
    await msg.answer("–£–ø—Å!ü´£ –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑", reply_markup=kb.atelier_choice_job)


@atelier_router.message(RepairJew.atelier_user_contact_share)
async def get_contact_user(msg: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(RepairJew.atelier_user_contact)
    await msg.answer(text.contact_user_share, reply_markup=kb.contact_keyboard)


@atelier_router.message(RepairJew.atelier_user_contact)
async def successful_order(msg: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    await state.update_data(user_contact=msg.contact.phone_number)
    data = await state.get_data()
    await state.bot.send_message(
        chat_id=314716345,
        text=f"–ó–∞–∫–∞–∑ –æ—Ç {msg.from_user.full_name} \n username: @{msg.from_user.username}"
        f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {data['user_contact']}"
        f"\n\t<b><i>{data['atelier_choice_job']}</i></b>"
        f"\n\t‚Ä¢<i>–í–∏–¥ –∏–∑–¥–µ–ª–∏—è:</i> \n\t    <b><i>{data['jew_selection']}</i></b>"
        f"\n\t‚Ä¢<i>–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–¥–µ–ª–∏—è:</i> \n\t    <b><i>{data['material']}</i></b>"
        f"\n\t<i>–í–∏–¥ —Ä–µ–º–æ–Ω—Ç–∞:</i> "
        f"\n\t    <b><i>{data['repair_choice_job']}</i></b> "
    )
    if 'ring_size_more_less' in data:
        await state.bot.send_message(
            chat_id=314716345,
            text=f"\n\t    <b><i>{data['ring_size_more_less']} –Ω–∞ {data['ring_size_count']}</i></b>"
        )
    if 'repair_picture' in data and data['repair_picture'] != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        await state.bot.send_message(chat_id=314716345, text="\n\t<i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è:</i>")
        await state.bot.send_photo(chat_id=314716345, photo=data['repair_picture'])
    else:
        await state.bot.send_message(chat_id=314716345, text="\n\t<i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>")
        await state.bot.send_message(chat_id=314716345, text="\n\t<i> -–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>")
    await state.clear()
    await msg.answer(
        "\t–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–∞–º."
        "\n\t–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
        f"\n\t {msg.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ‚ô•"
        "\n–° –ª—é–±–æ–≤—å—é, \n<i>'–Æ–≤–µ–ª–∏—Ä–Ω—ã–π –î–æ–º –î–∞–π–º–æ–Ω–¥'</i>",
        reply_markup=kb.write_order_back
    )
